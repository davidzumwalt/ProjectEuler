## The sequence of triangle numbers is generated by adding the natural 
## numbers. So the 7th triangle number would be 
## 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
  
## 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

## Let us list the factors of the first seven triangle numbers:
  
## 1: 1
## 3: 1,3
## 6: 1,2,3,6
## 10: 1,2,5,10
## 15: 1,3,5,15
## 21: 1,3,7,21
## 28: 1,2,4,7,14,28

## We can see that 28 is the first triangle number to have over five divisors.

## What is the value of the first triangle number to have over five hundred divisors?

## The answer is 76576500.

highlydivisibletri <- function(x = 500) {
  source('primefactors.R') ## Source the necessary functions (see https://github.com/davidzumwalt/ProjectEuler to download them)
  source('sieve.R')
  y <- sieve(1000) ## Create a list of primes (this goes a bit past the 1000th prime)
  a <- 0 ## Initialize number of divisors
  n <- 1 ## Initialize triangular number counter
  while (a <= x) {
    tri <- n / 2 * (n + 1) ## Generate triangular number
    a <- prod(primefactors(tri,y) + 1) ## Using prime factorization to calculate the number of 
    ## divisors from the sigma_0 divisor function (https://en.wikipedia.org/wiki/Divisor_function)
    if (a <= x) {
      n <- n + 1 ## Increment to the next triangular number.
    }
  }
  n / 2 * (n + 1) ## Report the triangular number for which the number of divisors exceeds x.
}


## > system.time(highlydivisibletri())
## user  system elapsed 
## 18.58    0.00   18.61 
