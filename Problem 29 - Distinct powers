## Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:
  
## 2^2=4, 2^3=8, 2^4=16, 2^5=32
## 3^2=9, 3^3=27, 3^4=81, 3^5=243
## 4^2=16, 4^3=64, 4^4=256, 4^5=1024
## 5^2=25, 5^3=125, 5^4=625, 5^5=3125
## If they are then placed in numerical order, with any repeats removed, we get the 
## following sequence of 15 distinct terms:
    
## 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
  
## How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?

## The answer is 9183.

## A challenge here is that we end up dealing with truly large numbers which
## are larger than can be handled by double precision floating-point numbers.

## This isn't exactly a challenge except that R cannot distinguish between some of
## these numbers when they are very large, and so when applying unique() a few of the numbers
## which should have been removed are not. Fortunately the 'gmp' package can handle
## very large numbers using the bigz raw format.

library(gmp) ## Load the gmp library

distinctpowers<-function(x=100){
  a<-as.bigz(vector(length=(x-1)^2)) ## Initialize a bigz vector which is (x-1)^2 in length
  b<-2:x ## Initialize powers
  j<-1 ## Initialize vector index
  for(i in 2:x){
    a[j:(j+(x-2))]<-pow.bigz(i,b) ## Fill in the j to j+(x-2)th index with the bigz vector of i^b
    j<-j+(x-1) ## Increment j appropriately so that we move up (x-1) positions in the index for the next loop
  }
  a<-unique(a) ## Remove all duplicate values.
  return(length(a)) ## Return the number of unique values.
}

## > system.time(distinctpowers())
## user  system elapsed 
## 0.72    0.01    0.74 
