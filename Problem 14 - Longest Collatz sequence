## The following iterative sequence is defined for the set of positive 
## integers:
  
## n → n/2 (n is even)
## n → 3n + 1 (n is odd)

## Using the rule above and starting with 13, we generate the following 
## sequence:
  
## 13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1

## It can be seen that this sequence (starting at 13 and finishing at 1) 
## contains 10 terms. Although it has not been proved yet (Collatz Problem), 
## it is thought that all starting numbers finish at 1.

## Which starting number, under one million, produces the longest chain?

## NOTE: Once the chain starts the terms are allowed to go above one million.

## The answer is 837799.

longestCollatz <- function(x = 1e6) {
  lengths <- matrix(0,x,2) ## Initialize a matrix to cache Collatz length - starting number pairs so we don't recalculate paths.
  
  for (i in 1:x) {  
    n <- i ## Initialize the first link in the Collatz chain
    tempseqlength <- 1 ## Initialize chain length
    while (n != 1) { 
      if (n <= x) { ## Only check if n has been cached if it's less than the limit x
        if (lengths[n,1] != 0) { ## Check if n already has a chain length cached
          lengths[i,1] <- i ## If so, fill in the ith row with its number and the current running length plus the length of n's chain.
          lengths[i,2] <- lengths[n,2] + tempseqlength - 1 ## The minus 1 accounts for double counting due to overlapping chains
          break ## Move on to the next i
        }
      }
      if (n %% 2 == 0) { ## If n doesn't have a chain already cached, follow the Collatz procedure.
        n <- n / 2
      }
      else{
        n <- 3 * n + 1
      }
      tempseqlength <- tempseqlength + 1 ## Increase the length of the chain each time through the while loop.
    }
    if (lengths[i,1] == 0) { ## If this is the first time finding the chain length of a number, fill in the number and its Collatz length.
      lengths[i,1] <- i
      lengths[i,2] <- tempseqlength
    }
  }
  lengths[which(max(lengths[,2]) == lengths[,2]),1] ## Return the number which has the largest length.
}


## Even with memoization, R isn't particularly speedy, but it's well under a minute.
## > system.time(longestCollatz())
## user  system elapsed 
## 18.16    0.00   18.28 
